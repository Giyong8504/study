쓰레드
1. 프로세스와 쓰레드
프로세스 : 실행 중인 프로그램
	-OS로 부터 실행에 필요한 자원(메모리) 할당 받아서 해당 메모리를 가지고 실행
여러 작업을 하는 공간 - 쓰레드
메인 작업대 - 메인쓰레드



2. 멀티쓰레딩 장점
	- CPU 사용률을 향상
	- 자원의 효율성 향상
	- 사용자의 경험(응답성) 향상


3. 멀티쓰레딩의 단점 
	- 하나의 자원을 서로 공유 -> 동시성 문제가 발생한다.
	


쓰레드의 구현과 실행
1.구현
	-Thread클래스를 상속
		java.lang.Thread 클래스

	-Runnable 인터페이스를 구현

	참고)
	   static Thread.currentThread() : 현재 실행중인 쓰레드
		

2. 쓰레드의 실행 -star()   run()-> 작업대
	- start()와 run()

3. 싱글쓰레드와 멀티쓰레드

시분할 방식

A B A B A B
	


쓰레드의 우선순위
1. 쓰레드 우선순위 지정하기
	- 싱글 코어 : 정확하게 동작
	- 멀티 코어 : 정확하지 않다.

	1~10 : setPriortiy(1~10)
		int getPriority() : 쓰레드의 우선순위
	MAX_PRIORITY : 10
	MIN_PRIORITY :1
	NORM_ROIORITY : 5

2. 쓰레드 그룹(thread group) (day29.exam01.Ex01)
	- 서로 관련된 쓰레드를 그룹으로 다루기 위한 것.
	- 모든 쓰레드는 쓰레드 그룹에 소속
		ThreadGroup 으로 만들수 있음.
		(main 쓰레드 그룹은 따로 정의 하지 않아도 main 그룹에 있음)





3. 데몬 쓰레드(daemon thread)
	- 다른 일반 쓰레드의 보조 쓰레드
		- 다른 일반 쓰레드의 작업이 종료 -> 보조 쓰레드도 종료
		
		- GC(Garbage Collector) : 
		- 문서 자동 저장 기능  : 내부에 데몬쓰레드가 동작하면서 자동으로 저장함. (Ex06)
			- 무한루프 돌면서 지켜보고 참조 끊기면 실행!
			-3초마다 문서 저장 기능 만들기

		- 이벤트 루브 
		
		setDaemon(true) : 데몬쓰레드




쓰레드의 실행제어
1. static sleep(long millis)
	 - 현재 실행중인 쓰레드 실행 지연

2. interrupt() 와 interrupted()
- interrupt() :  interrupted 상태 값 변경 - true
		interruptedException 발생
		- 멈춰있는 쓰레드를 깨워주는 역할


▼상태를 알아보려면 아래 메서드▼ (Ex04) , (Ex05)
boolean isInterrputed() : interrupted 상태 값
			(상태값만 조회)
 
boolean  interrupted() : interrupted 상태 값 
			-> true -> false



3. suspend()-일시정지, resume()-다시시작 , stop()-완전중지
-문제가 있을 수 있나봐?
(문서에서 쓰지말라고 한다~ 곧 사라질 예정~)

start() - 시작


4.yield()
	- 다음 쓰레드에게 작업 양보
	- 응답성 향상을 위해 사용


5.join()
	- 다른 쓰레드의 작업을 기다렸다가 끝나면 실행



쓰레드의 동기화 (Ex06, Accont)
- 동일성 문제를 해결해야함. (1번 할동안 2,3 블록) 
- synchronized를 이용한 동기화

synchronized : 메서드 접근 제어자 뒤쪽




volatile (Ex05) ***** 캐시값이 다 다르기떄문
	- CPU 코어의 캐시의 값을 사용 X, 직접 메모리(RAM)에 접근


























