Collection 인터페이스
	-List 인터페이스
	-Set 인터페이스
Map 인터페이스 





컬렉션 프레임워크 (Collections Framework

컬렉션 프레임워크란?

컬렉션(Collection) : 데이터군 - 자료를 의미
프레임워크 (Framework) : 표준화된 설계

데이터군을 다루는데 필요한 표준화된 설계 틀

자료 구조 -> 설계

1) 순차 자료구조
2) 집합 자료구조
3) 사전 자료구조

데이터의 추가, 조회, 삭제 (이런 기능들의 대표적인 메서드가 추가되어있음)▼

컬렉션 프레임워크 핵심 인터페이스
Collection 인터페이스
1. List 인터페이스 : 순차 자료 구조
	1)순서가 유지되는 자료 : 배열
	2)값은 중복이 가능하다
	3) 구현클레스
	   ArrayList (Ex03)
		- 배열을 구현한 클래스
		- 물리적 배열로 구성되어 있다.
		- 조회 속도가 빠르다. (단, 순차적으로 조회시)
		- 기본배열 크기는 10개 
		- 10개를 넘으면 기존 배열을 버리고 새로 2배 크기의 새로운 배열을생성
		- 쓰레드 안정성 X
		- 순서가 변경되는 변화 -> 새로운 배열 생성 -> 효율정 X
		- 추가, 수정, 삭제 -> 성능 저하 (처음부터 끝까지는 빠르지만 추가,수정,삭                         제를 하면 성능저하가 일어남. 그치만 많이 사용해~)

	   LinkedList - (ArrayList의 추가 수정 삭제를 보완하는 거)
		- 요소간의 연결 순서가 결정
		- ArrayList 보다는 조회 속도는 불리하지만
		- 요소의 추가, 수정, 삭제는 빠르다
		- 구현되어있는 메서드에보면 링크만 끊으면 되니 지우기, 앞,뒤 지우기, 추                         가 등 많음.



	   Vector
		- 배열을 구현한 클래스
		- 물리적 배열로 구성되어 있다.
		- 쓰레드 안정성 O
		- 과거의 소스와 호환성 유지 차원
		
	   Stack
		push(E e) :뒤에추가 (stack에 넣는거 )
		E pop() : 뒤에서 꺼내기( 꺼내고 제거 되는 값이 반환값으로 나옴.)

	   Queue
 		offer(E e) : 뒤에 추가
		poll() : 앞에서 꺼내기

	   ...

	데이터 추가 (오라클 문서 찾아보기)
	   add(...)
	   add(int index, E e) 순서가 있는 index가 추가되어있음. 
	
	데이터조회
	   E get(int index) : 순서 번호로 조회
	   boolean contains(Object o) : 특정 요소가 존재하면 true
	   int indexOf(Object o) : 특정 요소가 있는 위치 값 반환(0부터 시작)
				- 없으면 -1 반환.
				- 왼쪽-> 오른쪽 이동하면서 찾는다.

	   int lastIndex(Object o) : 특정 요소가 있는 위치 값 반환
				- 없으면 -1 반환
				- 오른쪽-> 왼쪽 이동하면서 찾는다.
				
	   int size() : 요소의 갯수


	데이터 삭제
	   E remove(int index) : 순서 번호로 요소 삭제
	   remove(Object o) 

	데이터 변경
	   E set(int index, E e)

2. Set 인터페이스 : 집합 자료 구조
	1) 중복을 허용하지 않는다.
		- equals(), hashCoed() 확인해야 됨.
	2) 순서 유지가 되지않는다. (집합이라 순서는 상관없다.)
	3) 구현 클레스
	   HashSet

	   TreeSet

	데이터 추가
		add(E e)
		
	데이터 조회
		boolean contains(Object o)
		int size()

	데이터 제거
		boolean remove(Object o)





-----------------------분리되어있음.----------------------------------

3. Map 인터페이스 : 사전 자료구조
	1) 키 - 값의 쌍구조
	2) 키는 값을 찾기 위한 키워드 : 중복 없음.(집합 자료) 같은값 안된다.
	3) 값은 중복을 허용한다.
	4) 구현 클래스
	   HashMap
	   TreeMap
	   
	   참고) 예전에 쓰던거
		Hashtable
		Properties


=================================================

Stack과 Queue

반복자 - 표준화
Iterator
  - Collection 인터페이스에 Iterator<E> iterator()가 정의되어있다. 

  - boolean hasNext() : 다음 요소가 있는지 체크
  - E next() : 다음 요소를 추출
  - 한번 반복을 다하면 종료해서 재활용이 안된다. 그럼? 다시 만들어야함.

ListIterator
  - List에만 정의된 iterator 
  - 순방향, 역방향 둘 다가능하게 정의되었음 다만, List에만 정의되어있어서 다른 곳 못씀

Enumeraiton

참고) 
GoF(Gang Of Four) 디자인패턴  ( 시간될 때 공부해보자, 실력이 팍! 늘어난대!)






































