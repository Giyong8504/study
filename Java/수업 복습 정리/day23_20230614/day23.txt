람다식?
- 메서드를 하나의 식으로 표현

forEach 공부하기
함수형 프로그램 (대답할거 정리하기)
   1) 함수 : 단일기능
   2)함수가 값
	-매개변수으로 사용가능
	-반환값으로 사용가능

2. 람다식 문법 살펴보기
	인터페이스의 객체가 되는 조건 - > 짧게 식으로 표현
	1) 인터페이스명, 함수명 생략
	2) 매개변수, 코드 구현부분({..}) ->
	3) 자료형 생략 
	4) 구현 코드가 한줄 -> { ... } 생략 가능
	   (반드시 return 예약어도 생략)
	5) 매개변수의 변수명도 최대한 짧게 쓰는게 관례
	   (1자)
	6) 매개변수가 1개이면 (...) 생략 가능  (MyLamda, Ex04)
	7) 단, 매개변수가 없을 땐 ( ) 생략 불가! (Ex04)

3. 람다식 사용하기

4. 함수형 인터페이스(Functional Interface)
	-람다식의 형식 체크 : 단일 기능으로써 1개 메서드만 정의 되어있는지..?
	@FunctionalInterface

문서를 보다가 @FunctionalInterface 있으면 람다를 쓰자!


5. 함수형 인터페이스 타입의 매개 변수와 반환타입

6. java.util.function 패키지
	-일반적으로 정의하는 함수의 유형을 인터페이스로 정의 제공
	
	******인터페이스*******암기 ************************
	Supplier<R>::R get() - 매개변수x 반환값 O
	Consumer?<T> :: void accept(T t); - 매개변수 O , 반환값 X 
	Function<T,R> :: R apply(T t) - 매개변수 O, 반환값 O
	Predicate<T> : boolean test(T t) - 매개변수 O, 반환값은 boolean
	************************암기 ************************

	- 매개변수가 2개짜리인 인터페이스 - Bi 
	BiConsumer : void accept(T t, U u)
	BiFunction<T,U,R> : R apply(T t,U u)
	BiPredicate<T,U> : boolean test(T t,U u)
	*****************************************************
	3개 이상은 없으니 따로 정의해야함.

	 매개변수와 반환값 자료형이 같은 경우
	- 매개변수가 1개
	UnaryOperator<T> : T apply(T t) == Function<T,T> 동일한 형태

	- 매개변수 2개
	BinaryOperator<T> : T apply(T t1, T t2); == BiFunction<T,T,T>


(DoubleToLongFunction to가붙으면 다 반환값)

	-기본형 타입 함수형 인터페이스 정의
		예) intToLongFunction : 정수가 들어왔지만 반환값은 Long
		
	-컴파일러가 충분히 예측가능한 
	


7. Function의 합성과 Predicate의 결합
	
	Function
	  - 함수의 결합
		andThen()
		compose()

	  - 항등 함수 // 받은 값을 그대로 반환
		identity() : x -> x

	Predicate의 결합 (판별, 검증할 때  사용만힝함)
	  - 조건식의 결합 : 논리 연산자
	  - and(Predicate ...)
	  - or(Predicate ...)
	  - negate() : 부정 (참 - > 거짓, 거짓 -> 참)

8. 메서드 참조
	-짧은게 좋다.









   

   - 자바는 함수가 함수, 값으로 절대 사용X

- 인터페이스 : 객체가 되는 조건(지역, 멤버 변수)
