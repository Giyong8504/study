스트림(Stream)
java.util.stream

참고) 편의 기능으로
java.util.Arrays
java.util.Collections



다르게 처리하면 코드를 여러먼 써야하니
데이터가 뭐든간에 스트림으로 바꿔주는 것. 동일한 방식으로.
명확하게 어떤걸 사용하는지 확인할 수 있기 때문에 보기 쉽다.

void 반환값이 없으면 끝!
연산하고 값이 나오는게 최종연산

 

1. 스트림이란?
-데이터 소스가 무엇이든(배열이든, 콜렉션이든) 간에 같은 방식(Stream에 정의된 방식)으로 다룰 수 있게 데이터를 추상화
-데이터를 다루는데 자주 사용되는 메서드들을 정의
-스트림은 데이터 소스를 변경하지 않는다.
-스트림은 일회용이다.
-스트림은 작업을 내부 반복으로 처리한다.



2. 스트림의 연산
-중간연산 - stream 계열이다
	-반환값이 Stream인 연산

-최종연산 
	-반환값이 Stream 아닌 연산
3. 지연된 연산
	-중간 연산은 최종연산이 호출되기 전까지는 연산X
	-최종 연산이 호출되어야 연산이 수행되고 소비된다.

4. 기본자료형을 다루는 스트림
	- 연산의 효율성 때문에 사용.( 오토박싱, 언방식 X 안함)
	- 숫자에 특화된 메서드를 제공 (특정 연산, 통계용 메서드)

	Stream<Integer> -> IntStream : mapToInt, mapToDouble, mapToLong변환 메서드가 존재함 

	IntStream -> Stream<Integer> : boxed()

	IntStream
	DoubleStream
	LongStream ...

	참고)
	중간연산 map(Function<T,R> ...) : 데이터의 변환


5.스트림 만들기  
- Stream 객체로 변환// 하게되면 동일한 stream의 기능으로 동일방식으로 처리.

1)컬렉션
	Collection 인터페이스
	Stream<E> stream()
	- 적용 범위 List, Set

2) 배열
	Stream Arrays.stream(배열...) 

3 각 Stream 인터페이스   (exam03.Ex01)
	.of(T... values)
	.of(int... values)



6. 특정 범위의 정수
	IntStream, LongStream
		range(...)
		rangeClosed(...)

7. 임의의 수
	java.util.Random  무한 난수 발생이기 때문에 항상 범위를 한정해서 써야한다.
		
		무한 난수를 발생시키는 스트림
		IntStream ints( ) : int 범위 내의 난수 (-2^32~ 2^32-1)
		LongStream longs( ) : Long 범위 내의 난수 (-2^63 ~ 2^63 -1)
		DobleStream double( ) : 0~1

8. iterate(), generate()
stratic Stream<T>iterate(T seed, UnaryOperator<T> f);

static Stream<T> generate()



9. concat()
	- 스트림을 연결 -> 하나의 스트림
	static Stream<T> concat(Stream<T> stm1, Stream<T>stm2);

중간연산 
10. skip() -건너뛰기 (Ex02)
     limit() - 갯수 제한

11. filter(predicate<T> ...) : Predicate의 test 메서드에서 true      -> 통과, false - 미통과
 
     ditinct() : 중복 제거 ( Ex03)
12. sorted() (Ex04)
    변환 메서드 : Funciton<T,R>

13. map()

14. mapToInt(),
	Stream<Integer> -> IntStream
     mapToLong()
	Stream<Long> -> LongStream
     mapToDouble()
	Stream<Double> -> DoubleStream

	1) 성능의 향상(오토박싱, 언박싱X)
	2) 숫자에 특화된 메서드를 제공
	(합계, 평균, 갯수, 통계)

15. peek( ) (Ex05)
	참고) forEach와 비슷하게 동작
	      void forEach는 최정 연산
	      Stream<T> peek(...) : 중간연산
	- 중간 부분에서 값을 확인할 때 주고 사용.


Optional와 OptionalINt
JDK8 - NullPointerException
- null에 대한 다양한 처리를 하기 위해 도입된 클래스
-Warpper 클래스
1. Optional 객체 생성하기
	static of(...) : null은 미허용 
	        ofNullable(..) : null도 허용

2.Optional 객체의 값 가져오기
	- 다양한 메서드

3. OptionalInt, OptionalLong, OptionalDouble

class Optional<T> ....{
...
private T value;
...
}
























