Arrays , Collections 을 먼저 참고해서 있으면 쓰고 없으면 만듦


java.util
Arrays (s가 붙어있으면 편의기능이 담겨있음)
1. 배열의 복사 - copyOf(), copyOfRange()
2. 배열 채우기 - fill(), setAll()
3.배열의 정렬과 검색 - sort(), binarySearch()
4. 문자열 비교와 출력 - equals, hashCode()



deepToString(...) : 2차원 배열 이상

Collections
 -컬렉션의 편의 기능
 -java.util

참고) 
정렬기준
java.lang.Comparable
   int compareTo

java.util.CompareTo


열거형 (enums)
1. 열거형이란?
	- 용도가 한정된 클래스의 일종
	- 상수만을 위한 클래스
	- 생성자는 무조건 private 형태로되어있어 내부에서만 객체 생성이 가능하다. 

2. 열거형 정의와 사용
	enum 클래스명{
	  상수명, 상수명...
	}


3. 모든 열거형의 상위클래스 - java.lang.Enum
	- java.lang.Enum 클래스의 하위 클래스

4. Enum 클래스에 정의된 메서드
	String name() :  상수이름(BUS, SUBWAY, TAXI) 문자열로반환
	int ordinal() : 상수의 순서 번호(0부터 시작)
	static E valueOf(String name)

5. 컴파일러가 자동으로 추가해주는 메서드
	E valueOf(String name);

	참고)
	  Enum 클래스의 각 상수는 정의된 Enum 클래스의 정적 상수 객체

6. 열거형 멤버 추가하기
7. 열거형 추상메서드 추가하기




==========Enum 정리================

열거형 클래스
enum 클래스{
상수명,
상수명,
}
- 상수만을 위한 클래스

1) java.lang.Enum의 하위 클래스 (정의되어있는 메서드 사용가능)
	String name() :  상수이름(BUS, SUBWAY, TAXI) 문자열로 변환
	int ordinal() : 상수의 순서 번호(0부터 시작)
	static E valueOf(Class<E> class, String name); 문자열이름 -> Enum 클래스 상수
	
	컴파일러가 자동 추가해주는 메서드
	  valueOf : 문자열 -> Enum 클래스 상수

2)enum 클래스의 정의된 상수 (상수는 주소가 중요하다 한개만 있음 되니.)
-정적 상수 객체

3) 모든 생성자가 private : 내부에서만 상수 형태로 생성이 가능

4) 추상클래스 : 추상메서드 정의 가능






==============================================
public abstract class Transportation extends java.lang.Enum { 정적상수 객체

    public static final BUS = new Transportation();

    public static final SUBWAY,= new Transportation();

    public static final TAXI= new Transportation();

    priavte Transportation() {} // 생성자

}
================================================


애너테이션(annotation)
	- 주석, 주해: 설명에 대한 것. ( @Override 등등)
	- 정보 전달
	- @interface 애노테이션 명  {

	   }

1. 에너테이션이란?
2 표준 에너테이션
	- JDK에 기본 정의된 애노테이션
	- 
3 메타 에너테이션
	- 애노테이션을 만들 수 있는 애노테이션
	- @Target : 적용 대상 범위 정의.
	      ElementType 이라는 Enum 상수가 정의되어있음.
		.TYPE
		.FIELD
		.PARAMETER...
		.CONSTRUCOR
		...
	- @Retention : 정보 전달 범위
	      RetentionPolicy
		.SOURCE : java 소스 상에 존재, class 파일에서 제거, 정보전달 시점 : 컴파일 시
			예) @Override
		.CLASS : 기본값, java 소스상, class 파일에 존재, 정보 전달 시점이 없다
		.RUNTIME : java 소스상, class 파일에도 존재, 정보 전달 시점 : 실행 중 정보 전달


4. @interface 애노테이션명
	 -> extends java.lang.annotation.Annotation 의 하위 인터페이스
		//이걸로 다형성으로 사용해서 사용

Class 클래스의 

==============================================

람다식?
- 메서드를 하나의 식으로 표현

참고) 
-함수형 프로그래밍
   -함수 : 단일기능
   -함수가 값
	-매개변수
	-반환값

   - 자바는 함수가 함수, 값으로 절대 사용X

- 인터페이스 : 객체가 되는 조건(지역, 멤버 변수)

























