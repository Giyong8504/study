TemporalAmount
2. Period와 Duration
  - between() 과 unit()
  - of(), with()
  - 다른 단위로 변환 - toTotalMonths(), toDays(), toHours() to Minutes()

Period : 날짜 사이 간격 (년,월,일) - LocalDate
Duration : 시간 사이간 격(나노, 초)

1) Period
   -static Period between(...);

2) Duration
   - getSeconds() 



6. Instant
  -EpochTime : Timestamp
         - 1970. 1. 1. 자정(UTC-0) /1/1000 카운팅한 수치

  - System.currentTimeMillis() 동일하게 EpochTime 을 반환하는 메서드
    랜덤하게 중복이 안되는 값 나오게 할 때 많이씀.

  -Date, Calendar 클래스에서 변환 객체로 활용
  

파싱과 포맷
1.DateTimeFormatter
     ofPattern("....") : 형식화할 날짜 시간 패턴
     .format(TemporalAccessor ..) : 형식화

2. 문자열을 날짜와 시간으로 파싱하기
    핵심 클래스의 메서드 
     parse


  예) LocalDateTime
              .parse()


format(...) : 자바 객체 -> 형식화된 문자열
parse(...) : 형식화된 문자열 - > 자바 객체


참고 )  Temporal 왠만한거 다됨.
6.Instant



=============================
모든 클래스는 오브젝트의 하위 클래스.
다형성으로 많이 사용하였으나 형변환과 출처확인히 필요했음.



지네릭스
1. 지네릭스란?
   - 다양한 자료형을 사용하기해서 Object
   - 형변환의 번거로움
   - 타입 안정성 문제 (instanceof...)
   위의 불편함 해소를 위해 나옴.

목적 - 타입 안정성확보, 형변환 번겅로움 해소.


2. 지네릭 클래스의 선언
   - 


3. 지네릭스의 용어
  Box<T> : 지네릭 클래스
  T : 타입 매개변수
  Box : 원시타입
  
  T - Type ( 아무거나 써도 상관없지만 관례적으로씀)
  E - Element
  K - Key
  V - Value



4. 지네릭스의 제한
<T extends 클래스>
  T : 클래스 자료형, 클래스의 하위 클래스

지네릭 클래스의 객체 생성과 사용


참고) 
지네릭 타입을 사용하지 못하는 형태
 - 타입이 객체 생성시에 결정
 - 처음부터 타입이 명확하게 결정되어야 하는 형태는 사용 불가
 - static 메서드 매개변수, static 변수에는 사용 불가
 - 배열 -> new 자료형으로 공간을 계산해서 만들어주기 때문에 자료형 결정되지 않은 시점에는 적용할 수 없다.
 -처음부터 결정되는 형태는 사용할 수 없음.

 - 인스턴스 메서드와 인스턴트 변수에만 사용가능.


사용가능한 형태
- 인스턴스 변수
- 인스턴트 메서드



Apple 로바뀌는 시점은?
->Box <Apple> ... 객체를 만들 때 형변환 발생함.
객체를 만드는 시점에 자료형이 결정됨.




제한된 지네릭 클래스
1. extends

지네릭메서드

1. 와일드 카드
 ? : ? extends Object
? -> 를 이용해서 여러개 가능

    ? extends A : A 클래스, A 클래스의 하위 클래스 : 상한 제한 : 이클래스 포함한 상위클래스 
    ? super A : A클래스, A 클래스의 상위 클래스 : 하한 제한

2. 지네릭메서드
























