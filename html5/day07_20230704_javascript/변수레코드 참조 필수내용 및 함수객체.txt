자바스크립트에서 함수 객체 -> 실행X

함수호출 -> 번역 -> 실행 가능한 객체 (EC- Execution Context) -> 스택 -> 실행 -> 종료
함수 객체 -> 실행안됨(만들어 줘야함) -> 평가(번역) -> EC(Excution Context - 실행 가능한 객체) -> 실행(스택)

Global EC (Execution Context) 객체 {
	변수 레코드 : {
		window.num0 = 5;
	}
	외부 레코드 참조 : null
	
	this 바인딩 : window
	
}

Outer EC(Execution Context) 객체 {
	변수 레코드 {
		num1: 10
	}
	
	외부 레코드 참조 : Global EC 변수 레코드 참조
	
	this 바인딩 : 호출한 객체
}


Inner EC(Execution Context) 객체 {
	변수 레코드{
		num2 : 20
	}	
	외부 레코드 참조 : Outer EC의 변수 레코드 참조 - Inner에서 Outer에 참조가 된다.
	
	this의 값을 결정(this : 바인딩) : 호출한 객체
	
}

유효범위 체인 - 위에 올라가면서 참조하는 것이 바로 이것.

```
**함수객체이다보니 혼자 실행은 안되고 내가 실행가능한 문맥을 만들고 이 문맥을 평가(번역) 하여 실행가능한 객체로 실행된다.**
```

변수를 아래에다 정의해도 전부 window 객체에 추가된다 /항상 소스 위쪽에 존재 -> 호이스팅
리터널 방식은 함수 적용시점 이후만 사용이 가능하다.

this는 함수가 호출될 때 결정(평가 후 EC가 생성 될 때)
